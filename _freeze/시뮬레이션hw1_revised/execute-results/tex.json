{
  "hash": "57be171274b487742fce1f592c10c7d4",
  "result": {
    "engine": "jupyter",
    "markdown": "# 시뮬레이션 과제1 수정 (베리어옵션) {.unnumbered}\n\n20249132 김형환\n\n## Question\n\n![](image/시뮬레이션hw1.png)\n\n## Answer 1\n\n### 파라미터 및 알고리즘\n\n먼저, MCS를 이용한 베리어옵션의 가격 계산에 필요한 파라미터는 아래와 같습니다.\n\n    s : 기초자산의 가격\n    k : 옵션의 행사가격\n    t : 옵션의 만기(연)\n    b : 옵션의 베리어\n    r : 무위험 금리\n    std : 기초자산의 변동성(표준편차)\n    UpDown : \"U\"이면 기초자산이 베리어보다 크면 knock, \"D\"이면 작으면 knock\n    InOut : \"I\"이면 Knock-in, \"O\"이면 Knock-out\n    CallPut : \"C\"이면 콜옵션, \"P\"이면 풋옵션\n    n : 시뮬레이션의 반복 횟수\n    m : 기초자산의 가격 관측 횟수\n    seed(=0) : 난수 생성의 최초 시드값\n\n위 파라미터를 이용해 베리어옵션 가격 산출 함수를 구성할 계획이며, 알고리즘은 아래와 같습니다.\n\n1. GBM을 따르는 기초자산의 가격 경로 n개를 이산오일러 근사를 통해 구성\n2. 하나의 경로는 m개의 관측기준점에 따라 나누어지며, 초기값 S0를 제외한 m개로 이루어짐. (전체 n*m matrix)\n3. 각각의 경로에 대하여, 기초자산 기준값과 베리어를 비교하여 옵션 pay-off 발생 여부 판단\n    - Up and Out : 기준값의 *최대값*이 베리어보다 **작거나 같은** 경우, pay-off 발생\n    - Up and In : 기준값의 *최대값*이 베리어보다 **큰** 경우, pay-off 발생\n    - Down and Out : 기준값의 *최소값*이 베리어보다 **크거나 같은** 경우, pay-off 발생\n    - Down and In : 기준값의 *최소값*이 베리어보다 **작은** 경우, pay-off 발생\n4. pay-off가 없으면 옵션가치는 0, 있으면 Call/Put 종류에 따라 pay-off를 계산하고, 그 현재가치가 하나의 경로의 옵션의 가치\n6. n개의 경로에 대해 옵션의 가치를 모두 산출하고, 산술평균하여 최종적으로 베리어옵션의 가격(및 Standard error) 산출\n\n이에 따른 Python 코드는 아래와 같습니다.\n\n### Python 구현\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\ndef BarrierOptionsPrice(s, k, t, b, r, std, UpDown, InOut, CallPut, n=10000,m=250):\n    '''\n    s : underlying price at t=0\n    k : strike price\n    t : maturity (year)\n    b : barrier price\n    r : risk-free rate (annualization, 1%=0.01)\n    std : standard deviation of underlying return (annualization, 1%=0.01)\n    UpDown : Up is \"U\", Down is \"D\" (should be capital)\n    InOut : In is \"I\", Out is \"O\" (should be capital)\n    CallPut : Call is \"C\", Put is \"P\" (should be capital)\n    n : number of simulation\n    m : number of euler-discrete partition\n    '''\n    dt = t/m\n    z = np.random.standard_normal( m*n ).reshape(n,m)\n    underlying_path = s*np.exp((r-0.5*(std**2))*dt+std*np.sqrt(dt)*z).cumprod(axis=1)\n    if UpDown==\"U\" and InOut==\"O\" :\n        payoff_logic = underlying_path.max(axis=1)<=b\n    elif UpDown==\"U\" and InOut==\"I\" :\n        payoff_logic = underlying_path.max(axis=1)>b\n    elif UpDown==\"D\" and InOut==\"O\" :\n        payoff_logic = underlying_path.min(axis=1)>=b\n    elif UpDown==\"D\" and InOut==\"I\" :\n        payoff_logic = underlying_path.min(axis=1)<b\n\n    if CallPut==\"C\" :\n        plain_price = np.maximum(underlying_path[:,-1]-k,0)*np.exp(-r*t)\n    elif CallPut==\"P\" :\n        plain_price = np.maximum(k-underlying_path[:,-1],0)*np.exp(-r*t)    \n\n    barrier_simulation = payoff_logic * plain_price\n    barrier_price = barrier_simulation.mean()\n    barrier_se = barrier_simulation.std(ddof = 1) / np.sqrt(n)\n    return barrier_price, barrier_se\n```\n:::\n\n\n### Analytic Solution과 비교\n\n해당 코드를 이용하여 베리어옵션 가격을 추정할 수 있으며, 이를 예재(QuantLib)의 결과값과 비교해보겠습니다.\n\n시뮬레이션 파라미터는 n=10000, m=250으로 설정하였습니다.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport QuantLib as ql\n\nS = 100; r = 0.03; vol = 0.2; T = 1; K = 100; B = 120; rebate = 0\nbarrierType = ql.Barrier.UpOut; optionType = ql.Option.Call\n\n#Barrier Option\ntoday = ql.Date().todaysDate(); maturity = today + ql.Period(T, ql.Years)\n\npayoff = ql.PlainVanillaPayoff(optionType, K)\neuExercise = ql.EuropeanExercise(maturity)\nbarrierOption = ql.BarrierOption(barrierType, B, rebate, payoff, euExercise)\n\n#Market\nspotHandle = ql.QuoteHandle(ql.SimpleQuote(S))\nflatRateTs = ql.YieldTermStructureHandle(ql.FlatForward(today, r, ql.Actual365Fixed()))\nflatVolTs = ql.BlackVolTermStructureHandle(ql.BlackConstantVol(today, ql.NullCalendar(), vol, ql.Actual365Fixed()))\nbsm = ql.BlackScholesProcess(spotHandle, flatRateTs, flatVolTs)\nanalyticBarrierEngine = ql.AnalyticBarrierEngine(bsm)\n\n#Pricing\nbarrierOption.setPricingEngine(analyticBarrierEngine)\nQL_UOCprice = barrierOption.NPV()\n\n# Hyeonghwan Pricing\nHH_UOCprice, HH_UOCse = BarrierOptionsPrice(S, K, T, B, r, vol, \"U\", \"O\", \"C\")\n\nprint(\"Up & Out Call with S=100, K=100, B=120, T=1, Vol=0.2, r= 0.03\",\"\\n\",\n    \"QuantLib price :\", QL_UOCprice,\"\\n\",\n    \"Hyeonghwan price :\", HH_UOCprice,\"\\n\",\n    \"Difference is\", QL_UOCprice - HH_UOCprice)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUp & Out Call with S=100, K=100, B=120, T=1, Vol=0.2, r= 0.03 \n QuantLib price : 1.155369999815115 \n Hyeonghwan price : 1.2965456033951188 \n Difference is -0.1411756035800038\n```\n:::\n:::\n\n\n다음은 동일한 파라미터를 이용하여 Up and In Call Barrier Option price를 비교하였습니다.\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\nUp & In Call with S=100, K=100, B=120, T=1, Vol=0.2, r= 0.03 \n QuantLib price : 8.258033384037908 \n Hyeonghwan price : 8.192630511804628 \n Difference is 0.06540287223328001\n```\n:::\n:::\n\n\n비교결과, 대체로 유사하였으나 오차가 상당수준 발생하였습니다.\n\nUp&Out에서는 MCS의 결과값이 크고 Up&In에서는 Analytic form의 결과값이 큰 경향이 있는데,\n\n이는 이산-오일러 근사을 통해 Continuous 구간을 m개(discrete)로 나누면서 발생한 것으로 추정됩니다.\n\n(모형 이산화 오류(Model Discretization Error)로 인해 편의(Bias) 발생)\n\n즉, 실제 베리어 Knock 여부는 기초자산의 연속적인 가격흐름을 모두 관측하여 판단해야하지만,\n\n이산화 과정에서 m번만 관측(m=250은 1일에 1번꼴)하게 되면서 그 사이의 가격을 관측할 수 없게 됩니다.\n\n이로 인해 Knock-out 방식의 옵션은 고평가되고, Knock-in 방식의 옵션은 저평가되는 결과가 나타납니다.\n\n이러한 편의는 m이 커질수록 작아져서 0으로 수렴하게 되며, 이에 대해서는 Answer3에서 다루겠습니다.\n\n## Answer 2\n\n### In-Out parity 정의\n\n베리어옵션의 In-Out parity란, 특정 상황에서 베리어옵션과 plain vanilla option의 가격 사이에 성립하는 등식을 말합니다.\n\n구체적으로 plain vanilla call option이 $c_{plain}=f(S,K,T,r,\\sigma,d)$로 주어져있고,\n\n베리어 B를 Knock할 때, 위 옵션과 동일한 pay-off를 제공하는 베리어옵션을 $c_{In}$, $c_{Out}$라고 한다면,\n\n이들 옵션 사이에는 아래와 같은 등식이 성립하게 됩니다.\n\n$$c_{In}+c_{Out}=c_{plain}$$\n\n이는 풋옵션에서도 동일하게 성립되며, 일반적인 유로피안 옵션은 Knock-In + Knock-Out 배리어옵션으로 분해할 수 있다는 의미가 됩니다.\n\n### 증명\n\n예시를 통해 In-Out parity가 성립함을 쉽게 알 수 있습니다.\n\n배리어가 B로 동일한 Knock-In & Out 옵션을 각각 I와 O라고 하겠습니다.\n\nI는 lookback period동안 기초자산의 가격이 B를 한번이라도 Knock하는 경우 payoff가 발생합니다. (Up & Down 포괄)\n\nO는 lookback period동안 기초자산의 가격이 B를 한번이라도 Knock하지 않는 경우 payoff가 발생합니다.\n\n따라서, 기간동안 Knock가 발생하면 I는 payoff가 발생하고 O는 payoff가 0이 되며,\n\nKnock가 발생하지 않으면 I는 payoff가 0이 되고 O는 payoff가 발생합니다.\n\n즉, I+O로 구성된 배리어옵션 포트폴리오를 생각하면 모든 기초자산의 가격범위에 대하여 payoff가 한번 발생하고\n\n해당 payoff는 plain vanilla 옵션의 payoff와 동일하므로 In-Out parity가 성립하게 됩니다.\n\n이를 수식으로 표현하면 아래와 같습니다.\n\n$c_{In}+c_{Out}=E^Q[e^{-rT}(S_T-K)^+\\mathbb{I}_{(\\exists S_t\\geq B)}]+E^Q[e^{-rT}(S_T-K)^+\\mathbb{I}_{(\\forall S_t< B)}]$\n\n$\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;=E^Q[e^{-rT}(S_T-K)^+](\\mathbb{I}_{(\\exists S_t\\geq B)}+\\mathbb{I}_{(\\forall S_t<B)})=E^Q[e^{-rT}(S_T-K)^+]$\n\n$\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;=c_{plain}\\;where\\;\\mathbb{I}_A=1\\;if\\;A\\;is\\;true\\;else\\;0$\n\n이는 MCS방식으로 베리어옵션을 가치평가를 할 때에도 쉽게 알 수 있는데,\n\n위 python코드에서 베리어옵션의 종류에 따라 payoff 발생여부를 판별할 때 사용한 if문에서\n\nIn, Out의 차이는 동전던지기의 앞뒷면처럼 상호배타적(mutually exclusive)임을 알 수 있습니다.\n\n### MCS에서의 활용\n\n한종류의 베리어옵션과 plain 옵션의 가격을 알고 있다면 다른 한 종류의 베리어옵션의 가격이 결정되므로,\n\nMCS를 이용하여 베리어옵션의 가격을 계산할 때 두번의 시뮬레이션을 한번으로 축소할 수 있을 것으로 생각해볼 수 있습니다.\n\n그러나, 이는 현재 위 코드가 사전에 In, Out을 지정하고 한 경우에 대해서 return값을 반환하기 때문인데\n\n이를 수정하여 Input으로 In, Out을 지정하지 않고 함수 내에서 In, Out 결과값을 각각 반환하게 한다면\n\n시뮬레이션의 축소효과는 사라지게 됩니다.\n\n더 나아가, 한번의 GBM경로를 생성하는 것에서 plain vanilla call&put, 배리어 In&Out, Up&Down옵션의 가격을\n\n모두 산출할 수 있으므로 parity를 이용하여 시뮬레이션 시간을 극적으로 단축하기는 어려울 것 같습니다.\n\n이외에도 산출된 결과값들끼리 parity를 이용해 적정성 여부를 검증하는 용도로는 활용성이 있을 것 같습니다.\n\n이때에도, parity가 성립하려면 bsm fomula를 통한 plain vanilla옵션이 아닌,\n\n베리어옵션과 동일한 이산오일러근사를 사용한 plain vanilla옵션의 가격을 사용해야 합니다.\n\n## Answer 3\n\nN, M에 따른 bias와 variance의 변화를 살펴보겠습니다.\n\n이를 살펴보기 위해 시뮬레이션 결과값인 베리어옵션가격. 즉, 표본평균 $\\bar y$의 분포를 이용하면 됩니다.\n\nCLT에 따라 베리어옵션가격의 분포는 $\\bar y\\sim N(y_{real}, \\frac{\\sigma^2}{N})$를 따르게 되므로,\n\n$Bias^2=(E[\\bar y]-y_{real})^2$, $Variance=E[(\\bar y-E[\\bar y])^2]$가 됩니다.\n\n이제, 주어진 N, M의 값에 대하여 K번 시뮬레이션을 반복하여 이를 계산하면 되며,\n\n계산의 효율화를 위해 편의와 분산은 아래와 같이 근사값으로 계산하여도 무방합니다.\n\n$Bias^2\\approx (\\bar y-y_{real})^2$\n\n$Variance=Var[\\bar y]=\\frac{\\sigma^2}{N}\\approx \\frac{s^2}{N}=S.E^2$\n\n$y_{real}$은 QuantLib의 결과값이라고 가정하고, Up&Out call옵션을 예시로 위의 결과를 살펴보겠습니다.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport time\nimport pandas as pd\ny_real = QL_UOCprice\nM = 50\n\nNs, bias, var, cal = np.zeros(10), np.zeros(10), np.zeros(10), np.zeros(10)\n\nfor i in range(10):\n    start = time.time()\n    N = (i+1)*1000\n    y, y_se = BarrierOptionsPrice(S, K, T, B, r, vol, \"U\", \"O\", \"C\", n=N, m=M)\n    Ns[i] = N\n    bias[i] = (y-y_real)**2\n    var[i] = y_se**2\n    end = time.time()\n    cal[i] = end-start\n\n\nresult = pd.DataFrame({\"N\":Ns,\"M\":M,'Bias^2':bias,'Variance':var,'MSE':bias+var,\"time\":cal})\nresult\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>N</th>\n      <th>M</th>\n      <th>Bias^2</th>\n      <th>Variance</th>\n      <th>MSE</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1000.0</td>\n      <td>50</td>\n      <td>0.233815</td>\n      <td>0.014036</td>\n      <td>0.247851</td>\n      <td>0.001814</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000.0</td>\n      <td>50</td>\n      <td>0.064735</td>\n      <td>0.006439</td>\n      <td>0.071175</td>\n      <td>0.003320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3000.0</td>\n      <td>50</td>\n      <td>0.042222</td>\n      <td>0.004161</td>\n      <td>0.046383</td>\n      <td>0.005007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4000.0</td>\n      <td>50</td>\n      <td>0.128648</td>\n      <td>0.003471</td>\n      <td>0.132119</td>\n      <td>0.006655</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5000.0</td>\n      <td>50</td>\n      <td>0.152907</td>\n      <td>0.002813</td>\n      <td>0.155720</td>\n      <td>0.008116</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6000.0</td>\n      <td>50</td>\n      <td>0.118306</td>\n      <td>0.002321</td>\n      <td>0.120627</td>\n      <td>0.010099</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7000.0</td>\n      <td>50</td>\n      <td>0.139482</td>\n      <td>0.001986</td>\n      <td>0.141467</td>\n      <td>0.011514</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8000.0</td>\n      <td>50</td>\n      <td>0.090082</td>\n      <td>0.001676</td>\n      <td>0.091758</td>\n      <td>0.013284</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9000.0</td>\n      <td>50</td>\n      <td>0.093373</td>\n      <td>0.001467</td>\n      <td>0.094841</td>\n      <td>0.014840</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10000.0</td>\n      <td>50</td>\n      <td>0.131647</td>\n      <td>0.001382</td>\n      <td>0.133030</td>\n      <td>0.016739</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**N을 증가시킬수록 시뮬레이션의 분산은 감소하며, 편의의 증감추세는 관측되지 않았습니다.\n**\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nN = 1000\n\nMs, bias, var, cal = np.zeros(10), np.zeros(10), np.zeros(10), np.zeros(10)\n\nfor i in range(10):\n    start = time.time()\n    M = (i+1)*50\n    y, y_se = BarrierOptionsPrice(S, K, T, B, r, vol, \"U\", \"O\", \"C\", n=N, m=M)\n    Ms[i] = M\n    bias[i] = (y-y_real)**2\n    var[i] = y_se**2\n    end = time.time()\n    cal[i] = end-start\n\n\nresult = pd.DataFrame({\"N\":N,\"M\":Ms,'Bias^2':bias,'Variance':var,'MSE':bias+var,\"time\":cal})\nresult\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>N</th>\n      <th>M</th>\n      <th>Bias^2</th>\n      <th>Variance</th>\n      <th>MSE</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1000</td>\n      <td>50.0</td>\n      <td>0.028666</td>\n      <td>0.011598</td>\n      <td>0.040265</td>\n      <td>0.001948</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1000</td>\n      <td>100.0</td>\n      <td>0.049862</td>\n      <td>0.012735</td>\n      <td>0.062597</td>\n      <td>0.003508</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1000</td>\n      <td>150.0</td>\n      <td>0.004199</td>\n      <td>0.009074</td>\n      <td>0.013273</td>\n      <td>0.005504</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1000</td>\n      <td>200.0</td>\n      <td>0.148563</td>\n      <td>0.014316</td>\n      <td>0.162879</td>\n      <td>0.006588</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1000</td>\n      <td>250.0</td>\n      <td>0.000185</td>\n      <td>0.010087</td>\n      <td>0.010272</td>\n      <td>0.008092</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1000</td>\n      <td>300.0</td>\n      <td>0.019473</td>\n      <td>0.011303</td>\n      <td>0.030776</td>\n      <td>0.009590</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1000</td>\n      <td>350.0</td>\n      <td>0.000539</td>\n      <td>0.010266</td>\n      <td>0.010805</td>\n      <td>0.011320</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1000</td>\n      <td>400.0</td>\n      <td>0.021450</td>\n      <td>0.012609</td>\n      <td>0.034060</td>\n      <td>0.014259</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1000</td>\n      <td>450.0</td>\n      <td>0.017826</td>\n      <td>0.011640</td>\n      <td>0.029466</td>\n      <td>0.015960</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1000</td>\n      <td>500.0</td>\n      <td>0.079944</td>\n      <td>0.012243</td>\n      <td>0.092186</td>\n      <td>0.017616</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**M을 증가시킬수록 시뮬레이션의 편의는 감소하며, 분산은 일정하게 유지되는 추세를 보입니다.\n**\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# 산출 신뢰도 향상을 위해각 N,M 별로 시뮬레이션 L번 반복 예정\nL = 200\nNs, Ms, bias, var = np.zeros(10), np.zeros(10), np.zeros(10), np.zeros(10)\n# 예산제약, N*M = tau, 계산시간이 N, M과 정비례한다고 가정\ntau = 2**16\n\nfor i in range(10):\n    N = 2**(i+4)\n    M = int(np.round(tau / N, 0))\n    y = []\n    for j in range(L):\n        tmp1, tmp2 = BarrierOptionsPrice(S, K, T, B, r, vol, \"U\", \"O\", \"C\", n=N, m=M)\n        y.append(tmp1)\n    Ns[i], Ms[i] = N, M\n    bias[i] = (np.mean(y) - y_real)**2\n    var[i] = np.var(y,ddof = 1)\n\nresult = pd.DataFrame({\"N\":Ns,\n                       \"log2(N)\":np.log2(Ns),\n                       \"M\":Ms,\n                       'Bias^2':bias,\n                       'Variance':var,\n                       'MSE':bias+var})\n\nresult.plot(x='log2(N)',y=['Bias^2','Variance','MSE'])\n```\n\n::: {.cell-output .cell-output-display}\n![](시뮬레이션hw1_revised_files/figure-pdf/cell-7-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n**N과 M을 증가시킬수록 계산시간도 증가**하므로, 한정된 계산시간 하에 MSE를 최소화하도록 N과 M을 정해야할 필요가 있습니다.\n\n",
    "supporting": [
      "시뮬레이션hw1_revised_files/figure-pdf"
    ],
    "filters": []
  }
}